<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - service-oriented-architecture</title>
    <link href="https://bspace.us/tags/service-oriented-architecture/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://bspace.us"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2008-02-09T00:00:00+00:00</updated>
    <id>https://bspace.us/tags/service-oriented-architecture/atom.xml</id>
    <entry xml:lang="en">
        <title>moving code onto the network</title>
        <published>2008-02-09T00:00:00+00:00</published>
        <updated>2008-02-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://bspace.us/posts/moving-code-onto-network/" type="text/html"/>
        <id>https://bspace.us/posts/moving-code-onto-network/</id>
        
        <content type="html">&lt;p&gt;In 2004, while in my masters program, deeply immersed in java object-oriented programming, I saw the potential benefits of code re-use that classes offer. I envisioned over time building up libraries of class-objects; by accessing them in future projects, I expected to be more and more productive.&lt;&#x2F;p&gt;
&lt;p&gt;Code-reuse never quite worked out that way, though. What I&#x27;ve tended to do for new projects has been to copy a similar class from a previous project, paste it into the new project, weed out unnecessary attributes and methods, and add new code. In a way this makes sense: though I lose out on &#x27;pure&#x27; code-reuse, I gain by having all code for a project together. That&#x27;s nice for version-control and portability, and isolation of concerns in that I don&#x27;t have to worry that a change in a class in one project will have unintended consequences in another project.&lt;&#x2F;p&gt;
&lt;p&gt;But reading a while back about service-oriented-architecture, and shortly thereafter having a need to code a couple of lines in python that I had just coded in php a day or two earlier -- the benefits of moving code into RESTful web-services, that is: moving it onto the network, became apparent.&lt;&#x2F;p&gt;
&lt;p&gt;I do that all the time now. Just last week I had a need to convert between 10 and 13-digit isbns -- for the second time in a recent project, so rather than coding the conversion directly in the program at hand I put it into a webservice.&lt;&#x2F;p&gt;
&lt;p&gt;In this shift, I&#x27;ve finally realized that goal of code reuse, while still being able to maintain the version-control and isolation of concerns benefits of focusing on my specific project at hand.&lt;&#x2F;p&gt;
&lt;p&gt;The book &#x27;RESTful Web Services&#x27; by Richardson and Ruby, while a bit dense, offers good insights on creating web-services (example: versioning). At some point, I&#x27;d like to come up with standards for Brown Library (and&#x2F;or campus-wide) web-services. Examples: specifying versioning in the url, a documention url in the returned data, and a url in that documentation of all APIs&#x2F;web-services the department offers.&lt;&#x2F;p&gt;
&lt;p&gt;For now, though, the simple shift toward moving code out of individual projects and onto the network has been rewarding.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
