<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - algorithms</title>
    <link href="https://bspace.us/tags/algorithms/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://bspace.us"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2008-04-06T00:00:00+00:00</updated>
    <id>https://bspace.us/tags/algorithms/atom.xml</id>
    <entry xml:lang="en">
        <title>weighted randomization</title>
        <published>2008-04-06T00:00:00+00:00</published>
        <updated>2008-04-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://bspace.us/posts/weighted-randomization/" type="text/html"/>
        <id>https://bspace.us/posts/weighted-randomization/</id>
        
        <content type="html">&lt;p&gt;Many years ago one of my children hit a wall with Math in elementary school. He had always been bright, and quick to pick things up, so this was something of a surprise to him as well as to me. His class was in the early stages of learning multiplication, and it turned out that he had initially been able to add numbers in his head quickly enough that he hadn&#x27;t needed to memorize the times-tables. This worked fine for him with lower numbers like 5x2, but began to break down pretty quickly with higher numbers like 9x7 and especially 23x76.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;flashcard-app&quot;&gt;Flashcard app&lt;&#x2F;h3&gt;
&lt;p&gt;So I ended up doing something I had sworn I&#x27;d never do: I created a flashcard program on the computer to help him memorize his basic times-tables. I had always thought that using computer programs for rote memorization was a travesty -- knowing that computers could be used for interesting and mind-expanding purposes rather than boring, mind-numbing ones. But this became a fascinating project. I started out implementing it in &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Filemaker_Pro&quot;&gt;FileMaker Pro&lt;&#x2F;a&gt;, which I had begun using extensively for some database projects, and eventually reimplemented the program in &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;REALbasic&quot;&gt;REALbasic&lt;&#x2F;a&gt;, a wonderful program (at least at the time; I haven&#x27;t used it in years) that introduced me to object-oriented programming, and through the sheer elegance of its interface and structure nurtured my growing sense that programming was about Art in addition to Logic.&lt;&#x2F;p&gt;
&lt;p&gt;In addition to wanting to present a nice interface, I also knew that I wanted the questions presented to my son to flow in such a way that he would be quizzed more often on the questions he answered incorrectly, and less often on the ones he answered correctly. In any given work-session, I also wanted him to be able to work with a narrow slice of the whole set of &#x27;difficult&#x27; problems so that he would perceive some sense of gaining mastery over material.&lt;&#x2F;p&gt;
&lt;p&gt;To clarify this last point, imagine a problem set of 10,000 questions, 5,000 of which are very easy, and 5,000 of which are very hard. Imagine you sit down to a 10-minute &#x27;memorization-session&#x27;. If the program utilizes a very simple algorithm which chooses &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Randomness&quot;&gt;randomly&lt;&#x2F;a&gt; from among the 5,000 difficult questions, chances are that after the 10 minutes you will have learned nothing and will be quite discouraged: you&#x27;ll likely not have seen the same question twice, and you&#x27;ll have answered everything wrong. This would be bad enough if you were an adult committed to learning the material, but if you were a kid in elementary school, this would be likely to crush any flickering desire to learn the material.&lt;&#x2F;p&gt;
&lt;p&gt;And I wanted my program to be fun.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;details&quot;&gt;Details&lt;&#x2F;h3&gt;
&lt;p&gt;My solution was to use what I call &#x27;weighted-randomization&#x27;. Sometime I&#x27;ll do a thorough search for the files I used those many years ago to see if I can find the code I created -- for posterity, amusement, and fond reflection. The basic idea consisted of two steps. First, from among all the... I guess 169 possible times-table queries (0x0 through 12x12), I chose a small subset: 10 as I recall, although eventually I made this number selectable via a preferences-pane (remember, I made this for a young kid, and assumed two 5-minute practice-sessions a day -- the latter one being optional but often completed because the app was fun). Second, I presented the queries. But of course the joy was in the details.&lt;&#x2F;p&gt;
&lt;p&gt;For the selection-step, my recollection is that I iterated through each possibility, and assigned it a &#x27;selection-number&#x27;, then sorted the list on selection-number and took the top 10. Before I describe the selection-number, I must first note that each possible query was initially assigned a &#x27;score&#x27; of 0. When a query was answered correctly, the score was incremented; when answered incorrectly, the score was decremented. I eventually put the increment and decrement values into the app&#x27;s preferences-pane to play around with their effect on the operation of the application, and as I recall usually had them set to increment correct answers by 1, and decrement incorrect answers by 2.&lt;&#x2F;p&gt;
&lt;p&gt;So why the selection-number rigamarole? Why not just sort on score, and take the 10 lowest numbers? That certainly would achieve the goal of presenting the user with the most-problematic problem-set. I did do that initially, but added the selection-number for two reasons. First, the simple presentation of only the hardest problems felt, well... boring. Second, I thought if I occasionally threw in some problems &#x27;mostly&#x27; known, I would encourage crucial reinforcement to take place. And if one or two of the problem-set were &#x27;easy&#x27;, well, those queries&#x27; scores would rapidly increase and be less likely to be selected as part of the subset next time. Thus the selection-number. I don&#x27;t remember the exact details, which I changed and experimented with extensively, but the basic idea: I took the lowest-score and the highest score, and split the range between them into, say, 10 equal segments. I then iterated through the queryset. For each score, I determined the segment it belonged to, then created a certain number of random-numbers, took the highest one, and assigned that as the selection-number. A more specific concrete example... Say the lowest score was -25 and the highest score was 5. That&#x27;s a difference of 30. Splitting that into 10 segment-ranges yields segment ranges of 3 values. Thus the bottom segment-range would be -25 through -23, while the top segment would be 3 through 5. During the iteration step, if I came across -23 (in selection-range &#x27;10&#x27;), I would create &#x27;10&#x27; random numbers, and the highest one would become that query&#x27;s selection-number. If I came across &#x27;3&#x27; (in selection-range &#x27;1&#x27;), I would create &#x27;1&#x27; random number; it would become that query&#x27;s selection-number. Thus sorting then on selection-number and choosing the ten highest numbers would usually offer a subset of all queries consisting of mostly the hardest queries, mixed with some somewhat-hard queries, with an occasional easy query thrown in. Beautiful. Again, I don&#x27;t remember the specific details, and do remember that I played frequently with the number of ranges and the number of random-numbers assigned for each range, but this description reflects the general approach to the slice-selection step.&lt;&#x2F;p&gt;
&lt;p&gt;The program was a hit, and did exactly what I had hoped, helped my child memorize his times-tables. Shortly after I built it, I was immersed in learning Italian, and realized that with just a few tweaks this would be a terrific tool to help me memorize vocabulary. That also worked well, especially the ability to focus a review-sesion on a subset of all the words, because I built up a vocabulary set of hundreds of words. But abstracted from the tool, I kept ruminating on what made &#x27;weighted-randomization&#x27; so compelling.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-idea&quot;&gt;The idea&lt;&#x2F;h3&gt;
&lt;p&gt;The concept binds together polar notions in a way that feels &#x27;right&#x27;. Variety, as we&#x27;ve all heard, is the spice of life; morphing random-chance into likelihood offers possibilities for combining intentionality with variability to create joyful experience, as any gamer knows. The game &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dungeons_and_dragons&quot;&gt;Dungeons &amp;amp; Dragons&lt;&#x2F;a&gt; wonderfully codified realms of probability in spirals of detail useful to both the casual gamer and the addict: a strong character will be more &#x27;likely&#x27; to defeat a weaker character, but more granularly, a particular delivery of a particular blow will be more or less likely to be successful based on the quality of the attacking weapon and the defending shield, the skill of the attacker and defender, etc. The &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Dice#Non-cubical_dice&quot;&gt;varied dice&lt;&#x2F;a&gt; used to calculate these percentages seem themselves talismans. But on a simpler level, any player of &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Risk_%28game%29&quot;&gt;Risk&lt;&#x2F;a&gt; or &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Backgammon&quot;&gt;Backgammon&lt;&#x2F;a&gt; perceives these same issues. The roll of the dice is pure chance, but the strength of ones position makes the outcome of a battle or game dependent on the same order-and-chance qualities embodied in weighted-randomization.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;making-the-world-a-better-place&quot;&gt;Making the world a better place&lt;&#x2F;h3&gt;
&lt;p&gt;I find it interesting to think about applying randomization to other systems. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20080830093825&#x2F;http:&#x2F;&#x2F;www.llamagraphics.com&#x2F;LB&#x2F;index.php&quot;&gt;LifeBalance&lt;&#x2F;a&gt; is a wonderful little to-do list program I miss using since I gave up my Palm for an &lt;a href=&quot;http:&#x2F;&#x2F;www.apple.com&#x2F;iphone&#x2F;&quot;&gt;iPhone&lt;&#x2F;a&gt;. I don&#x27;t have direct knowledge of its internals, but I suspect it incorporates weighted-randomization in it&#x27;s preparation of one&#x27;s task-list. One part of the program offers the ability to define broad areas of life (i.e. work, maintaining friendships, family-life, etc.) and assign a rough percentage of time one would ideally like to devote to each area. Since to-do tasks end up being subsets of these areas, and since each task can be assigned a rough amount of time it will take to accomplish, the program tracks how much time is &lt;em&gt;actually&lt;&#x2F;em&gt; being expended in the broad areas, and optionally adjusts the current to-do list to maintain the preferred balance. The result is that there may be occasions in which a task of a slightly lower priority can appear higher on a to-do list than a task with a higher priority, if the lower-priority task will better-serve the less-immediate goal of achieving the life-area balance specified. This approach could conceivably be implemented using algorithms that don&#x27;t utilize weighted-randomization, but this is just the kind of situation that weighted-randomization would be good for -- injecting a bit of flexibility into a system while still maintaining overall goals.&lt;&#x2F;p&gt;
&lt;p&gt;As a final thought experiment, imagine possibilities for injecting weighted-randomization into political systems.&lt;&#x2F;p&gt;
&lt;p&gt;I have a vague memory from a college class, likely jumbled by time, of hearing that in 15th Florence, a cohort of possible city-council leaders was chosen from among the populace much like those chosen for jury-duty today. As I recall, each individual in the cohort was then voted on by the populace, but only whether the individual was fit to serve: a yes or no vote. If a person received enough yes-votes, his name was put into a hat from which the new leaders were drawn at random. This unusual form of weighted-randomization suggests that when injected into political systems, it might reduce corrupting influences and by inference improve quality. Usually, and reasonably, years-of-service or merit-evaluations or test-scores are the institutional barriers to corruption. Weighted-randomization could be another tool worth exploring.&lt;&#x2F;p&gt;
&lt;p&gt;Imagine that of all bills a legislative committee debates publicly, 80% are selected for debate according to usual political processes, and 20% via a weighted-randomization scheme akin to my math flash-card program (i.e., perhaps a manual ranking of preference followed by randomizations based on those rankings). Obviously no one would want chance to factor into whether a bill actually becomes law, but since so many good ideas die for want of being scheduled for committee debate (often for questionable political reasons), injecting a bit of weighted-randomization into such a process could be a good thing, certainly worth trying.&lt;&#x2F;p&gt;
&lt;p&gt;I may add to this post other realms in which weighted-randomization might offer systemic improvements. Feel free to suggest ideas; I may post a few of them here.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
