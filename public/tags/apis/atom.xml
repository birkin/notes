<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title> - APIs</title>
    <link href="https://bspace.us/tags/apis/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://bspace.us"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2008-05-18T00:00:00+00:00</updated>
    <id>https://bspace.us/tags/apis/atom.xml</id>
    <entry xml:lang="en">
        <title>nice lightweight SOA implementation</title>
        <published>2008-05-18T00:00:00+00:00</published>
        <updated>2008-05-18T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://bspace.us/posts/nice-soa-implementation/" type="text/html"/>
        <id>https://bspace.us/posts/nice-soa-implementation/</id>
        
        <content type="html">&lt;p&gt;I&#x27;ve evangelized &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Service-oriented_architecture&quot;&gt;service-oriented architecture&lt;&#x2F;a&gt; (SOA) &lt;a href=&quot;https:&#x2F;&#x2F;bspace.us&#x2F;posts&#x2F;moving-code-onto-network&#x2F;&quot;&gt;before&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;To review, briefly and roughly: SOA promotes decoupled services. For example, a Fahrenheit-to-Celsius converter would likely be implemented as a web-service, instead of as a function&#x2F;method embedded&#x2F;tied into some bigger program. The benefits of this are multiple: 1) The service can be written in any programming language, and accessed by other services written in different languages. 2) SOA makes the idealized promise of code-reuse a reality.&lt;&#x2F;p&gt;
&lt;p&gt;I have a programmer friend who works for a large corporation who is familiar with implementing SOA using industrial-scale best-practices; I&#x27;m familiar with implementing it in a lightweight, seat-of-the-pants fashion.&lt;&#x2F;p&gt;
&lt;p&gt;Over the past year+ I&#x27;ve created well over a dozen or so SOA web-services for different projects. But I recently implemented one I put some best-practice effort into that&#x27;ll be a model for my future SOA work. Some links:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;[2023 update -- the march of progress has resulted in the retirement of these services, so no active links. Sorry!]&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;http:&#x2F;&#x2F;library.brown.edu&#x2F;services&#x2F;language_translator&#x2F;&lt;&#x2F;code&gt;
&lt;code&gt;http:&#x2F;&#x2F;library.brown.edu&#x2F;services&#x2F;language_translator&#x2F;api_v1&#x2F;code_eng&#x2F;&lt;&#x2F;code&gt;
&lt;code&gt;http:&#x2F;&#x2F;library.brown.edu&#x2F;services&#x2F;language_translator&#x2F;api_v1&#x2F;all&#x2F;&lt;&#x2F;code&gt;
&lt;code&gt;http:&#x2F;&#x2F;library.brown.edu&#x2F;services&#x2F;language_translator&#x2F;list&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;What I like about this one...&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The api urls offer &#x27;discovery&#x27; via embedding, in the built-in returned data, contact and documentation information. Having just one of these pieces of info would be great; having both is particularly nice because web urls and staff change over time. Why is this useful? If someone is looking at the code that calls this service 5 years from now, and if I&#x27;m not around, the documentation will provide info on some extra features of the service that otherwise wouldn&#x27;t be apparent if, say, the web-service just returned the word &#x27;English&#x27;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The api urls are &#x27;hackable&#x27;, another way of enhancing discovery. One can intuitively try entering a code other than &#x27;enk&#x27; to see what comes up (like &#x27;&lt;a href=&quot;http:&#x2F;&#x2F;library.brown.edu&#x2F;services&#x2F;language_translator&#x2F;api_v1&#x2F;code_tlh&#x2F;&quot;&gt;tlh&lt;&#x2F;a&gt;&#x27;). Also, reasonably appropriate things happen if one lops off increasing sections of the url (in this case, redirects to documentation pages).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The api urls are versioned. Key:value pairs can be added to this api -- but the existing key:value pairs must never be changed. The reason is that post-release, I don&#x27;t know who&#x27;s using it for what, thus I have to assume any changes could break someone&#x27;s app. So if I want to change the label &#x27;response&#x27; to &#x27;language&#x27;, and deliver it in xml, I can leave the existing one as is, and label the new one &#x27;api_v2&#x27;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;All these urls utilize server-caching. This is an implementation rather than a design feature, but worth mentioning. &lt;a href=&quot;http:&#x2F;&#x2F;www.djangoproject.com&#x2F;&quot;&gt;Django&lt;&#x2F;a&gt; offers a flexible and easy-to-use &lt;a href=&quot;http:&#x2F;&#x2F;www.djangoproject.com&#x2F;documentation&#x2F;cache&#x2F;&quot;&gt;caching feature&lt;&#x2F;a&gt;; I have it set so that the list and api urls only have to hit the database once a day, no matter how many times the urls are hit. Further, django&#x27;s caching is intelligent: its response includes &#x27;Cache-Control&#x27;, &#x27;Etag&#x27;, and &#x27;Expires&#x27; http-headers so that a browser or well-designed code &lt;em&gt;doesn&#x27;t even have to call the web-service again&lt;&#x2F;em&gt; to redisplay the data. Nice. This would be particularly important and useful for something like RSS feeds. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Good info...&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A terrific, hands-on review-resource on http-headers: The &lt;a href=&quot;http:&#x2F;&#x2F;www.diveintopython.org&#x2F;http_web_services&#x2F;index.html&quot;&gt;web-services chapter&lt;&#x2F;a&gt; of Mark Pilgrims &#x27;Dive Into Python&#x27; &lt;a href=&quot;http:&#x2F;&#x2F;www.diveintopython.org&#x2F;index.html&quot;&gt;website&lt;&#x2F;a&gt; &amp;amp; &lt;a href=&quot;http:&#x2F;&#x2F;www.worldcat.org&#x2F;oclc&#x2F;56366433&quot;&gt;book&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Many of the features of this language_translator web-service were informed by the &lt;a href=&quot;http:&#x2F;&#x2F;www.worldcat.org&#x2F;oclc&#x2F;82671871&quot;&gt;book&lt;&#x2F;a&gt; &#x27;RESTful Web Services&#x27;, by Richardson &amp;amp; Ruby. Some parts are a bit dense, but it&#x27;s chock-full of terrific detailed info and food for thought. I came across it after having written a half-dozen or so SOA web-services, each one a little different and better, and it directly addressed many issues I had begun to think about or saw referenced via web-research.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;em&gt;[Acknowledgements to Peter Murray&#x27;s&lt;&#x2F;em&gt; &lt;a href=&quot;http:&#x2F;&#x2F;dltj.org&#x2F;article&#x2F;defining-soa-by-analogy&#x2F;&quot;&gt;&lt;em&gt;article&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; &lt;em&gt;and Richard Akerman&#x27;s Access_2006&lt;&#x2F;em&gt; &lt;a href=&quot;http:&#x2F;&#x2F;scilib.typepad.com&#x2F;science_library_pad&#x2F;access2006&#x2F;&quot;&gt;&lt;em&gt;presentation&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; &lt;em&gt;that first inspired my SOA thinking.]&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>practical campus APIs &amp; feeds</title>
        <published>2008-02-16T00:00:00+00:00</published>
        <updated>2008-02-16T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://bspace.us/posts/campus-api-ideas/" type="text/html"/>
        <id>https://bspace.us/posts/campus-api-ideas/</id>
        
        <content type="html">&lt;p&gt;For a while now I&#x27;ve evangelized APIs &amp;amp; feeds, encouraging folk (and reminding myself) to to expose &#x27;web-page&#x27; data by presenting it in some alternate structured format. That&#x27;s partly for the purpose of making code-reuse a reality but even more-so for the purpose of making possible new and interesting uses of data.&lt;&#x2F;p&gt;
&lt;p&gt;At the Library, we&#x27;ve truly moved into the realm of moving code onto the network. The web-services we&#x27;ve created have, not surprisingly, been library-related:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;An isbn converter.&lt;&#x2F;li&gt;
&lt;li&gt;A &#x27;cleaner&#x27; for data output from an ILS API.&lt;&#x2F;li&gt;
&lt;li&gt;Many &#x27;tunnelers&#x27; into consortial borrowing services returning results of searches, with the order number, if applicable.&lt;&#x2F;li&gt;
&lt;li&gt;A reprocessor of OCLC xISBN data that returns a only those OCLC xISBNS that have the same format and are in the same language as the submitted ISBN.&lt;&#x2F;li&gt;
&lt;li&gt;An OCLC to ISBN converter that will take an OCLC number and see if there are versions of that item available with ISBNs.&lt;&#x2F;li&gt;
&lt;li&gt;An OPAC status &amp;amp; location checker.&lt;&#x2F;li&gt;
&lt;li&gt;etc. etc. etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;ve wondered recently what APIs the library could offer that would be of value campus-wide. More specifically, what APIs we might develop for our own needs that would be useful to the campus as a whole. Of course, many of our APIs do currently benefit the wider campus community in that students, staff, and faculty across campus use services of ours that are made possible via our behind-the-scenes use of APIs. I&#x27;m thinking more of APIs that developers in other departments might find directly useful.&lt;&#x2F;p&gt;
&lt;p&gt;When considering APIs that would be useful for developers across the campus, I naturally think of our Computing and Information Services department (CIS). I&#x27;ve had good conversations, and hope to have many more in the future, with CIS folk about having them develop and evangelize campus-wide APIs. My thinking has been that over time, developing such APIs could save them an enormous amount of time as well as enhance good will from departmental developers.&lt;&#x2F;p&gt;
&lt;p&gt;An example: for one of our Library projects, we need a listing of faculty and course information. I&#x27;m not directly involved in this project, but my understanding is that we periodically request a list of faculty and courses from CIS; they produce the list; and we update some db tables for web-apps that make use of this information. My sense is that if certain Banner APIs could be enabled -- obviously with appropriate security implemented -- we could get this information directly from a feed &#x2F; API call, simplifying our workflow and lightening the workflow of the CIS folk who produce the list for us.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;m encouraged from my conversations that there are folk in CIS who share this perspective and are working to realize it. While good discussions and planning proceed, I find myself gravitating to what we in the Library could do &lt;em&gt;now&lt;&#x2F;em&gt; along these lines. Three ideas...&lt;&#x2F;p&gt;
&lt;h3 id=&quot;cafeteria-menu&quot;&gt;Cafeteria menu&lt;&#x2F;h3&gt;
&lt;p&gt;As part of an idea that deserves its own post (the idea sounds a bit silly without context, but indulge me), I&#x27;ve thought that it would be very useful on a particular Library web page to be able to display the next upcoming meal at the main campus cafeterias. I spent about ten minutes exploring the availability of that information, and found two web-pages and a downloadable excel spreadsheet. None of these are ideal sources of information to automate, but it could be done, and I wouldn&#x27;t be at all surprised if the resulting structured feed would be of use to others, from individual students to the campus newspaper.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;saferide-arrival-time&quot;&gt;SafeRide arrival time&lt;&#x2F;h3&gt;
&lt;p&gt;We have a campus shuttle system comprised of about seven vans. A couple of these have GPS receivers, and a vendor website displays on a map &lt;em&gt;(map was linked; but no longer available)&lt;&#x2F;em&gt;, via quite gnarly javascript, the current location of the GPS-enabled vans. That&#x27;s nice, but the experience could be significantly improved. &lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve thought it would be extremely useful to be able to display on a Library web-page (if the student is accessing the page from within the Library) a simple line like &amp;quot;The next SafeRide shuttle should arrive here in about 10 minutes.&amp;quot; Simple and seriously, wonderfully useful information, that doesn&#x27;t get in the way of the task at hand. That same Library web-page, if accessed from outside of the Library, simply wouldn&#x27;t have that line displayed.&lt;&#x2F;p&gt;
&lt;p&gt;The API we could create, from parsing the javascript on the vendor web-page, could most simply at a minimum return location information for the GPS-enabled shuttles, which could be interpreted by our own server-side logic to approximate arrival times. But even better, the logic of determining arrival times could be embedded in the API itself. The API could take a location-parameter and return expected arrival time for the submitted location. We at the library might only implement logic that focuses on the arrival times at the Library. But by opening up the arrival-assessment code, we could allow BioMed developers to add to add arrival-time logic for shuttle-stop-locations close to BioMed buildings, and students to add arrival-time logic for shuttle-stop-locations close to particular dorms.&lt;&#x2F;p&gt;
&lt;p&gt;Since developers can determine the IP address of an incoming request for information, and since developers and computer-knowledgeable students know the IP-address ranges of buildings in their purview, we really can do this.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;public-computer-availability&quot;&gt;Public computer availability&lt;&#x2F;h3&gt;
&lt;p&gt;Imagine you&#x27;re a student. You need to get some good work done and &lt;em&gt;know&lt;&#x2F;em&gt; if you stay in your dorm room this evening you won&#x27;t get that work done -- there are just too many distractions. So you want to go to the Library. You have a desktop computer, or maybe just don&#x27;t feel like lugging your laptop in the rain, and you know the Libraries have public clusters. Problem is -- it&#x27;s getting close to midterms and sometimes the clusters get pretty full. Wouldn&#x27;t it be &lt;em&gt;great&lt;&#x2F;em&gt;, I mean, really, really great, to be able to access a web-page that shows public cluster availability across campus?&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve talked with some CIS folk about this and found individuals who are working hard to realize this goal. They do have software that can detect the &#x27;in-use&#x27; status of each terminal in the clusters, and last I checked (in November, I think) had noted that the software had upgraded its web-display capability which with they were experimenting. However, the public web display of cluster availability is as of this writing only accessible... from cluster machines. But the hope is that this information will eventually be made more public. That&#x27;s great, but I&#x27;d like to take the data a step further, and create an API to the data. The reason is that if the data were also exposed via an API in addition to a web-page, I could solve more specific problems in a targeted way. For instance, one of our Libraries has 15 floors, with public computers available on multiple floors. Wouldn&#x27;t it be terrific if a student entering that Library could glance at a display screen and see the relevant computer availability (with floor numbers listed instead of generic cluster IDs) for just that building? An API would allow that.&lt;&#x2F;p&gt;
&lt;p&gt;I have other ideas as well, but this gives a good flavor of how in the future, as we meet Library needs, we might be able to offer very useful API data to developers across campus.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;To close, an exhortation... In each of these three situations, I speak of creating an API from existing publicly available electronic data. My excitement about creating and then utilizing these APIs for user-services is evident. But really, I should not have to create the APIs; I should be able to spend my time building the useful services for the Library and our campus that the APIs allow. So to all: if you know anyone creating any web-information -- encourage that person to expose their data not only via a &#x27;regular&#x27; web-page, but also in a predictable structured way that can make its re-use easy. And to anyone purchasing any vendor-service that offers electronic information, demand that the service offers an API to the data.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>moving code onto the network</title>
        <published>2008-02-09T00:00:00+00:00</published>
        <updated>2008-02-09T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://bspace.us/posts/moving-code-onto-network/" type="text/html"/>
        <id>https://bspace.us/posts/moving-code-onto-network/</id>
        
        <content type="html">&lt;p&gt;In 2004, while in my masters program, deeply immersed in java object-oriented programming, I saw the potential benefits of code re-use that classes offer. I envisioned over time building up libraries of class-objects; by accessing them in future projects, I expected to be more and more productive.&lt;&#x2F;p&gt;
&lt;p&gt;Code-reuse never quite worked out that way, though. What I&#x27;ve tended to do for new projects has been to copy a similar class from a previous project, paste it into the new project, weed out unnecessary attributes and methods, and add new code. In a way this makes sense: though I lose out on &#x27;pure&#x27; code-reuse, I gain by having all code for a project together. That&#x27;s nice for version-control and portability, and isolation of concerns in that I don&#x27;t have to worry that a change in a class in one project will have unintended consequences in another project.&lt;&#x2F;p&gt;
&lt;p&gt;But reading a while back about service-oriented-architecture, and shortly thereafter having a need to code a couple of lines in python that I had just coded in php a day or two earlier -- the benefits of moving code into RESTful web-services, that is: moving it onto the network, became apparent.&lt;&#x2F;p&gt;
&lt;p&gt;I do that all the time now. Just last week I had a need to convert between 10 and 13-digit isbns -- for the second time in a recent project, so rather than coding the conversion directly in the program at hand I put it into a webservice.&lt;&#x2F;p&gt;
&lt;p&gt;In this shift, I&#x27;ve finally realized that goal of code reuse, while still being able to maintain the version-control and isolation of concerns benefits of focusing on my specific project at hand.&lt;&#x2F;p&gt;
&lt;p&gt;The book &#x27;RESTful Web Services&#x27; by Richardson and Ruby, while a bit dense, offers good insights on creating web-services (example: versioning). At some point, I&#x27;d like to come up with standards for Brown Library (and&#x2F;or campus-wide) web-services. Examples: specifying versioning in the url, a documention url in the returned data, and a url in that documentation of all APIs&#x2F;web-services the department offers.&lt;&#x2F;p&gt;
&lt;p&gt;For now, though, the simple shift toward moving code out of individual projects and onto the network has been rewarding.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Vendor API Manifesto</title>
        <published>2007-12-06T00:00:00+00:00</published>
        <updated>2007-12-06T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://bspace.us/posts/vendor-api-manifesto/" type="text/html"/>
        <id>https://bspace.us/posts/vendor-api-manifesto/</id>
        
        <content type="html">&lt;p&gt;&lt;em&gt;(I wrote this early in the Fall of 2007 and circulated it to folk in the Library who were attending meetings at which vendors were advertising their wares.)&lt;&#x2F;em&gt; &lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Software products are created, understandably, primarily to meet existing needs. There are varied bodies of thought as to how much a software product should be designed to meet &#x27;future possible needs&#x27;.&lt;&#x2F;p&gt;
&lt;p&gt;At certain points in recent history, it may have been reasonable to design the sole interface to a system assuming that the user of the interface would be a person using a web-browser.&lt;&#x2F;p&gt;
&lt;p&gt;Though APIs (application programming interface) have been around for ages, the trend toward programmers wanting to access internal and external systems via APIs has accelerated tremendously over the last few years.[*] As a programmer for a creative web-services department in a creative Library, I&#x27;m part of this trend. Our team&#x27;s need to be able to programmatically access systems has increased dramatically. Fortunately, a few vendors such as Ex Libris understand this and have built possibilities for programmatic access into their products. But many closed systems remain.&lt;&#x2F;p&gt;
&lt;p&gt;To managers and directors making purchasing decisions, I urge that a &lt;em&gt;top-level&lt;&#x2F;em&gt; purchasing consideration be whether the vendor&#x27;s product offers an API to the information it provides (in addition to any built-in web interface). The simple reason is that a web presentation of information is designed for a single purpose: for a user to interact with the system via a browser. An API allows the system&#x27;s data to be accessed in any way we see fit, now or in the future.&lt;&#x2F;p&gt;
&lt;p&gt;A concrete example for any reader not familiar with the notion of an API...&lt;&#x2F;p&gt;
&lt;p&gt;Our team is currently developing a system to simplify the process of obtaining a book through interlibrary-loan services. In order to do this we have been able to automate the process of searching a consortial web-catalog for an item, and requesting that item. But the only method of doing this involves creating a program which essentially mimics a browser, automatically simulating clicked buttons and links and reading the resulting HTML of the consortial catalog&#x27;s web interface.&lt;&#x2F;p&gt;
&lt;p&gt;This works, but is terribly fragile: if the design of a web-page changes, our program may no longer work until it is reconfigured to understand the new design.&lt;&#x2F;p&gt;
&lt;p&gt;What we absolutely need (in addition to the existing web interface) is a catalog-service (the API) which would allow a defined http request to be sent to a URL that will allow a search to be performed, or an item to be requested, etc. (That http request would come from a program our team has written -- instead of from a user sitting at a browser.) Each request to this API would return predictable documented structured information (XML is one standard; there are others). Our team&#x27;s program would then be able to automatically process this information.&lt;&#x2F;p&gt;
&lt;p&gt;It is worth emphasizing that I am not asking for a &#x27;whole new program&#x27; from the catalog vendor. A system&#x27;s existing internal program logic that produces the information for the regular web data-stream is applicable to production of the alternate API data-stream. Yes, it takes thought and work to create a good and secure API and document it -- but an API, essentially, presents the same data as a web interface, in a simpler format. The mind-shift in offering an API is often larger than the work-shift.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, about interacting with vendors regarding this issue... Vendor sales people aren&#x27;t the developers, and it sounds like I am asking for something that vendor developers would be more knowledgeable about. But I&#x27;ve seen different vendor sales representatives at workshops and conferences, and the representatives for products that provide APIs have universally very clearly understood the importance of this issue. Thus if a product representative does not seem to understand this important feature, I would have significant concerns with the product.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;p&gt;Notes...&lt;&#x2F;p&gt;
&lt;p&gt;[*] Key aspects of this trend are articulated in the seminal article &lt;a href=&quot;http:&#x2F;&#x2F;www.oreillynet.com&#x2F;pub&#x2F;a&#x2F;oreilly&#x2F;tim&#x2F;news&#x2F;2005&#x2F;09&#x2F;30&#x2F;what-is-web-20.html&quot;&gt;&amp;quot;What Is Web 2.0 --
Design Patterns and Business Models for the Next Generation of Software&amp;quot;&lt;&#x2F;a&gt; by Tim O&#x27;Reilly.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
